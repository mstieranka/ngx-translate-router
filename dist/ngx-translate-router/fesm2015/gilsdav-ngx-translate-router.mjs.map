{"version":3,"file":"gilsdav-ngx-translate-router.mjs","sources":["../../../projects/ngx-translate-router/src/lib/localize-router.config.ts","../../../projects/ngx-translate-router/src/lib/localize-router.parser.ts","../../../projects/ngx-translate-router/src/lib/util.ts","../../../projects/ngx-translate-router/src/lib/localize-router.service.ts","../../../projects/ngx-translate-router/src/lib/localize-router.pipe.ts","../../../projects/ngx-translate-router/src/lib/gilsdav-reuse-strategy.ts","../../../projects/ngx-translate-router/src/lib/localized-router.ts","../../../projects/ngx-translate-router/src/lib/localize-router.module.ts","../../../projects/ngx-translate-router/src/lib/localize-router-config-loader.ts","../../../projects/ngx-translate-router/src/public_api.ts","../../../projects/ngx-translate-router/src/gilsdav-ngx-translate-router.ts"],"sourcesContent":["import { Inject, InjectionToken, Provider, Injectable, Optional } from '@angular/core';\r\nimport { Routes } from '@angular/router';\r\nimport { LocalizeRouterModule } from './localize-router.module';\r\n\r\n/**\r\n * Guard to make sure we have single initialization of forRoot\r\n */\r\nexport const LOCALIZE_ROUTER_FORROOT_GUARD = new InjectionToken<LocalizeRouterModule>('LOCALIZE_ROUTER_FORROOT_GUARD');\r\n\r\n/**\r\n * Static provider for keeping track of routes\r\n */\r\nexport const RAW_ROUTES: InjectionToken<Routes[]> = new InjectionToken<Routes[]>('RAW_ROUTES');\r\n\r\n/**\r\n * Type for Caching of default language\r\n */\r\n// export type CacheMechanism = 'LocalStorage' | 'Cookie';\r\n\r\n/**\r\n * Namespace for fail proof access of CacheMechanism\r\n */\r\nexport enum CacheMechanism {\r\n  LocalStorage = 'LocalStorage',\r\n  SessionStorage = 'SessionStorage',\r\n  Cookie = 'Cookie'\r\n}\r\n\r\n/**\r\n * Boolean to indicate whether to use cached language value\r\n */\r\nexport const USE_CACHED_LANG = new InjectionToken<boolean>('USE_CACHED_LANG');\r\n/**\r\n * Cache mechanism type\r\n */\r\nexport const CACHE_MECHANISM = new InjectionToken<CacheMechanism>('CACHE_MECHANISM');\r\n/**\r\n * Cache name\r\n */\r\nexport const CACHE_NAME = new InjectionToken<string>('CACHE_NAME');\r\n/**\r\n * Cookie cache format\r\n */\r\nexport const COOKIE_FORMAT = new InjectionToken<boolean>('COOKIE_FORMAT');\r\n/**\r\n * Cookie cache format\r\n */\r\nexport const INITIAL_NAVIGATION = new InjectionToken<boolean>('INITIAL_NAVIGATION');\r\n\r\n/**\r\n * Type for default language function\r\n * Used to override basic behaviour\r\n */\r\nexport type DefaultLanguageFunction = (languages: string[], cachedLang?: string, browserLang?: string) => string;\r\n\r\n/**\r\n * Function for calculating default language\r\n */\r\nexport const DEFAULT_LANG_FUNCTION = new InjectionToken<DefaultLanguageFunction>('DEFAULT_LANG_FUNCTION');\r\n\r\n/**\r\n * Boolean to indicate whether prefix should be set for single language scenarios\r\n */\r\nexport const ALWAYS_SET_PREFIX = new InjectionToken<boolean>('ALWAYS_SET_PREFIX');\r\n\r\n/**\r\n * Config interface for LocalizeRouter\r\n */\r\nexport interface LocalizeRouterConfig {\r\n  parser?: Provider;\r\n  useCachedLang?: boolean;\r\n  cacheMechanism?: CacheMechanism;\r\n  cacheName?: string;\r\n  defaultLangFunction?: DefaultLanguageFunction;\r\n  alwaysSetPrefix?: boolean;\r\n  cookieFormat?: string;\r\n  initialNavigation?: boolean;\r\n}\r\n\r\nconst LOCALIZE_CACHE_NAME = 'LOCALIZE_DEFAULT_LANGUAGE';\r\nconst DEFAULT_COOKIE_FORMAT = '{{value}};{{expires}}';\r\nconst DEFAULT_INITIAL_NAVIGATION = false;\r\n\r\n@Injectable()\r\nexport class LocalizeRouterSettings implements LocalizeRouterConfig {\r\n\r\n  public cacheMechanism: CacheMechanism;\r\n  public defaultLangFunction: DefaultLanguageFunction;\r\n\r\n  /**\r\n   * Settings for localize router\r\n   */\r\n  constructor(\r\n    @Inject(USE_CACHED_LANG) public useCachedLang: boolean = true,\r\n    @Inject(ALWAYS_SET_PREFIX) public alwaysSetPrefix: boolean = true,\r\n    @Inject(CACHE_MECHANISM) cacheMechanism = CacheMechanism.LocalStorage,\r\n    @Inject(CACHE_NAME) public cacheName: string = LOCALIZE_CACHE_NAME,\r\n    @Inject(DEFAULT_LANG_FUNCTION) defaultLangFunction = void 0,\r\n    @Inject(COOKIE_FORMAT) public cookieFormat: string = DEFAULT_COOKIE_FORMAT,\r\n    @Inject(INITIAL_NAVIGATION) public initialNavigation: boolean = DEFAULT_INITIAL_NAVIGATION,\r\n  ) {\r\n    this.cacheMechanism = cacheMechanism;\r\n    this.defaultLangFunction = defaultLangFunction;\r\n  }\r\n\r\n}\r\n","import { Routes, Route, NavigationExtras, Params } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { firstValueFrom, Observable, Observer } from 'rxjs';\r\nimport { Location } from '@angular/common';\r\nimport { CacheMechanism, LocalizeRouterSettings } from './localize-router.config';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { HttpParams } from '@angular/common/http';\r\n\r\nconst COOKIE_EXPIRY = 30; // 1 month\r\n\r\n/**\r\n * Abstract class for parsing localization\r\n */\r\n@Injectable()\r\nexport abstract class LocalizeParser {\r\n  locales: Array<string>;\r\n  currentLang: string;\r\n  routes: Routes;\r\n  defaultLang: string;\r\n\r\n  protected prefix: string;\r\n  protected escapePrefix: string;\r\n\r\n  private _translationObject: any;\r\n  private _wildcardRoute: Route;\r\n  private _languageRoute: Route;\r\n\r\n  /**\r\n   * Loader constructor\r\n   */\r\n  constructor(@Inject(TranslateService) private translate: TranslateService,\r\n    @Inject(Location) private location: Location,\r\n    @Inject(LocalizeRouterSettings) private settings: LocalizeRouterSettings) {\r\n  }\r\n\r\n  /**\r\n   * Load routes and fetch necessary data\r\n   */\r\n  abstract load(routes: Routes): Promise<any>;\r\n\r\n  /**\r\n * Prepare routes to be fully usable by ngx-translate-router\r\n * @param routes\r\n */\r\n  /* private initRoutes(routes: Routes, prefix = '') {\r\n    routes.forEach(route => {\r\n      if (route.path !== '**') {\r\n        const routeData: any = route.data = route.data || {};\r\n        routeData.localizeRouter = {};\r\n        routeData.localizeRouter.fullPath = `${prefix}/${route.path}`;\r\n        if (route.children && route.children.length > 0) {\r\n          this.initRoutes(route.children, routeData.localizeRouter.fullPath);\r\n        }\r\n      }\r\n    });\r\n  } */\r\n\r\n\r\n  /**\r\n   * Initialize language and routes\r\n   */\r\n  protected init(routes: Routes): Promise<any> {\r\n    let selectedLanguage: string;\r\n\r\n    // this.initRoutes(routes);\r\n    this.routes = routes;\r\n\r\n    if (!this.locales || !this.locales.length) {\r\n      return Promise.resolve();\r\n    }\r\n    /** detect current language */\r\n    const locationLang = this.getLocationLang();\r\n    const browserLang = this._getBrowserLang();\r\n\r\n    if (this.settings.defaultLangFunction) {\r\n      this.defaultLang = this.settings.defaultLangFunction(this.locales, this._cachedLang, browserLang);\r\n    } else {\r\n      this.defaultLang = this._cachedLang || browserLang || this.locales[0];\r\n    }\r\n    selectedLanguage = locationLang || this.defaultLang;\r\n    this.translate.setDefaultLang(this.defaultLang);\r\n\r\n    let children: Routes = [];\r\n    /** if set prefix is enforced */\r\n    if (this.settings.alwaysSetPrefix) {\r\n      const baseRoute: Route = { path: '', redirectTo: this.defaultLang, pathMatch: 'full' };\r\n\r\n      /** extract potential wildcard route */\r\n      const wildcardIndex = routes.findIndex((route: Route) => route.path === '**');\r\n      if (wildcardIndex !== -1) {\r\n        this._wildcardRoute = routes.splice(wildcardIndex, 1)[0];\r\n      }\r\n      children = this.routes.splice(0, this.routes.length, baseRoute);\r\n    } else {\r\n      children = [...this.routes]; // shallow copy of routes\r\n    }\r\n\r\n    /** exclude certain routes */\r\n    for (let i = children.length - 1; i >= 0; i--) {\r\n      if (children[i].data && children[i].data['skipRouteLocalization']) {\r\n        if (this.settings.alwaysSetPrefix) {\r\n          // add directly to routes\r\n          this.routes.push(children[i]);\r\n        }\r\n        // remove from routes to translate only if doesn't have to translate `redirectTo` property\r\n        if (children[i].redirectTo === undefined || !(children[i].data['skipRouteLocalization']['localizeRedirectTo'])) {\r\n          children.splice(i, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    /** append children routes */\r\n    if (children && children.length) {\r\n      if (this.locales.length > 1 || this.settings.alwaysSetPrefix) {\r\n        this._languageRoute = { children: children };\r\n        this.routes.unshift(this._languageRoute);\r\n      }\r\n    }\r\n\r\n    /** ...and potential wildcard route */\r\n    if (this._wildcardRoute && this.settings.alwaysSetPrefix) {\r\n      this.routes.push(this._wildcardRoute);\r\n    }\r\n\r\n    /** translate routes */\r\n    return firstValueFrom(\r\n      this.translateRoutes(selectedLanguage)\r\n    );\r\n  }\r\n\r\n  initChildRoutes(routes: Routes) {\r\n    this._translateRouteTree(routes);\r\n    return routes;\r\n  }\r\n\r\n  /**\r\n   * Translate routes to selected language\r\n   */\r\n  translateRoutes(language: string): Observable<any> {\r\n    return new Observable<any>((observer: Observer<any>) => {\r\n      this._cachedLang = language;\r\n      if (this._languageRoute) {\r\n        this._languageRoute.path = language;\r\n      }\r\n\r\n      this.translate.use(language).subscribe((translations: any) => {\r\n        this._translationObject = translations;\r\n        this.currentLang = language;\r\n\r\n        if (this._languageRoute) {\r\n          this._translateRouteTree(this._languageRoute.children, true);\r\n          // if there is wildcard route\r\n          if (this._wildcardRoute && this._wildcardRoute.redirectTo) {\r\n            this._translateProperty(this._wildcardRoute, 'redirectTo', true);\r\n          }\r\n        } else {\r\n          this._translateRouteTree(this.routes, true);\r\n        }\r\n\r\n        observer.next(void 0);\r\n        observer.complete();\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Translate the route node and recursively call for all it's children\r\n   */\r\n  private _translateRouteTree(routes: Routes, isRootTree?: boolean): void {\r\n    routes.forEach((route: Route) => {\r\n      const skipRouteLocalization = (route.data && route.data['skipRouteLocalization']);\r\n      const localizeRedirection = !skipRouteLocalization || skipRouteLocalization['localizeRedirectTo'];\r\n\r\n      if (route.redirectTo && localizeRedirection) {\r\n        const prefixLang = route.redirectTo.indexOf('/') === 0 || isRootTree;\r\n        this._translateProperty(route, 'redirectTo', prefixLang);\r\n      }\r\n\r\n      if (skipRouteLocalization) {\r\n        return;\r\n      }\r\n\r\n      if (route.path !== null && route.path !== undefined/* && route.path !== '**'*/) {\r\n        this._translateProperty(route, 'path');\r\n      }\r\n      if (route.children) {\r\n        this._translateRouteTree(route.children);\r\n      }\r\n      if (route.loadChildren && (<any>route)._loadedRoutes?.length) {\r\n        this._translateRouteTree((<any>route)._loadedRoutes);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Translate property\r\n   * If first time translation then add original to route data object\r\n   */\r\n  private _translateProperty(route: Route, property: string, prefixLang?: boolean): void {\r\n    // set property to data if not there yet\r\n    const routeData: any = route.data = route.data || {};\r\n    if (!routeData.localizeRouter) {\r\n      routeData.localizeRouter = {};\r\n    }\r\n    if (!routeData.localizeRouter[property]) {\r\n      routeData.localizeRouter = { ...routeData.localizeRouter, [property]: route[property] };\r\n    }\r\n\r\n    const result = this.translateRoute(routeData.localizeRouter[property]);\r\n    (<any>route)[property] = prefixLang ? this.addPrefixToUrl(result) : result;\r\n  }\r\n\r\n  get urlPrefix() {\r\n    if (this.settings.alwaysSetPrefix || this.currentLang !== this.defaultLang) {\r\n      return this.currentLang ? this.currentLang : this.defaultLang;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add current lang as prefix to given url.\r\n   */\r\n  addPrefixToUrl(url: string): string {\r\n    const splitUrl = url.split('?');\r\n    splitUrl[0] = splitUrl[0].replace(/\\/$/, '');\r\n\r\n    const joinedUrl = splitUrl.join('?');\r\n    if (this.urlPrefix === '') {\r\n      return joinedUrl;\r\n    }\r\n\r\n    if (!joinedUrl.startsWith('/')) {\r\n      return `${this.urlPrefix}/${joinedUrl}`;\r\n    }\r\n    return `/${this.urlPrefix}${joinedUrl}`;\r\n  }\r\n\r\n  /**\r\n   * Translate route and return observable\r\n   */\r\n  translateRoute(path: string): string {\r\n    const queryParts = path.split('?');\r\n    if (queryParts.length > 2) {\r\n      throw Error('There should be only one query parameter block in the URL');\r\n    }\r\n    const pathSegments = queryParts[0].split('/');\r\n\r\n    /** collect observables  */\r\n    return pathSegments\r\n      .map((part: string) => part.length ? this.translateText(part) : part)\r\n      .join('/') +\r\n      (queryParts.length > 1 ? `?${queryParts[1]}` : '');\r\n  }\r\n\r\n  /**\r\n   * Get language from url\r\n   */\r\n  getLocationLang(url?: string): string {\r\n    const queryParamSplit = (url || this.location.path()).split(/[\\?;]/);\r\n    let pathSlices: string[] = [];\r\n    if (queryParamSplit.length > 0) {\r\n      pathSlices = queryParamSplit[0].split('/');\r\n    }\r\n    if (pathSlices.length > 1 && this.locales.indexOf(pathSlices[1]) !== -1) {\r\n      return pathSlices[1];\r\n    }\r\n    if (pathSlices.length && this.locales.indexOf(pathSlices[0]) !== -1) {\r\n      return pathSlices[0];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get user's language set in the browser\r\n   */\r\n  private _getBrowserLang(): string {\r\n    return this._returnIfInLocales(this.translate.getBrowserLang());\r\n  }\r\n\r\n  /**\r\n   * Get language from local storage or cookie\r\n   */\r\n  private get _cachedLang(): string {\r\n    if (!this.settings.useCachedLang) {\r\n      return;\r\n    }\r\n    if (this.settings.cacheMechanism === CacheMechanism.LocalStorage) {\r\n      return this._cacheWithLocalStorage();\r\n    }\r\n    if (this.settings.cacheMechanism === CacheMechanism.SessionStorage) {\r\n      return this._cacheWithSessionStorage();\r\n    }\r\n    if (this.settings.cacheMechanism === CacheMechanism.Cookie) {\r\n      return this._cacheWithCookies();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save language to local storage or cookie\r\n   */\r\n  private set _cachedLang(value: string) {\r\n    if (!this.settings.useCachedLang) {\r\n      return;\r\n    }\r\n    if (this.settings.cacheMechanism === CacheMechanism.LocalStorage) {\r\n      this._cacheWithLocalStorage(value);\r\n    }\r\n    if (this.settings.cacheMechanism === CacheMechanism.SessionStorage) {\r\n      this._cacheWithSessionStorage(value);\r\n    }\r\n    if (this.settings.cacheMechanism === CacheMechanism.Cookie) {\r\n      this._cacheWithCookies(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cache value to local storage\r\n   */\r\n  private _cacheWithLocalStorage(value?: string): string {\r\n    try {\r\n      if (typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\r\n        return;\r\n      }\r\n      if (value) {\r\n        window.localStorage.setItem(this.settings.cacheName, value);\r\n        return;\r\n      }\r\n      return this._returnIfInLocales(window.localStorage.getItem(this.settings.cacheName));\r\n    } catch (e) {\r\n      // weird Safari issue in private mode, where LocalStorage is defined but throws error on access\r\n      return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cache value to session storage\r\n   */\r\n  private _cacheWithSessionStorage(value?: string): string {\r\n    try {\r\n      if (typeof window === 'undefined' || typeof window.sessionStorage === 'undefined') {\r\n        return;\r\n      }\r\n      if (value) {\r\n        window.sessionStorage.setItem(this.settings.cacheName, value);\r\n        return;\r\n      }\r\n      return this._returnIfInLocales(window.sessionStorage.getItem(this.settings.cacheName));\r\n    } catch (e) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cache value via cookies\r\n   */\r\n  private _cacheWithCookies(value?: string): string {\r\n    try {\r\n      if (typeof document === 'undefined' || typeof document.cookie === 'undefined') {\r\n        return;\r\n      }\r\n      const name = encodeURIComponent(this.settings.cacheName);\r\n      if (value) {\r\n        let cookieTemplate = `${this.settings.cookieFormat}`;\r\n        cookieTemplate = cookieTemplate\r\n          .replace('{{value}}', `${name}=${encodeURIComponent(value)}`)\r\n          .replace(/{{expires:?(\\d+)?}}/g, (fullMatch, groupMatch) => {\r\n            const days = groupMatch === undefined ? COOKIE_EXPIRY : parseInt(groupMatch, 10);\r\n            const date: Date = new Date();\r\n            date.setTime(date.getTime() + days * 86400000);\r\n            return `expires=${date.toUTCString()}`;\r\n          });\r\n\r\n        document.cookie = cookieTemplate;\r\n        return;\r\n      }\r\n      const regexp = new RegExp('(?:^' + name + '|;\\\\s*' + name + ')=(.*?)(?:;|$)', 'g');\r\n      const result = regexp.exec(document.cookie);\r\n      return decodeURIComponent(result[1]);\r\n    } catch (e) {\r\n      return; // should not happen but better safe than sorry (can happen by using domino)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if value exists in locales list\r\n   */\r\n  private _returnIfInLocales(value: string): string {\r\n    if (value && this.locales.indexOf(value) !== -1) {\r\n      return value;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get translated value\r\n   */\r\n  private translateText(key: string): string {\r\n    if (this.escapePrefix && key.startsWith(this.escapePrefix)) {\r\n      return key.replace(this.escapePrefix, '');\r\n    } else {\r\n      if (!this._translationObject) {\r\n        return key;\r\n      }\r\n      const fullKey = this.prefix + key;\r\n      const res = this.translate.getParsedResult(this._translationObject, fullKey);\r\n      return res !== fullKey ? res : key;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Strategy to choose between new or old queryParams\r\n   * @param newExtras extras that containes new QueryParams\r\n   * @param currentQueryParams current query params\r\n   */\r\n  public chooseQueryParams(newExtras: NavigationExtras, currentQueryParams: Params) {\r\n    let queryParamsObj: Params;\r\n    if (newExtras && newExtras.queryParams) {\r\n      queryParamsObj = newExtras.queryParams;\r\n    } else if (currentQueryParams) {\r\n      queryParamsObj = currentQueryParams;\r\n    }\r\n    return queryParamsObj;\r\n  }\r\n\r\n  /**\r\n   * Format query params from object to string.\r\n   * Exemple of result: `param=value&param2=value2`\r\n   * @param params query params object\r\n   */\r\n  public formatQueryParams(params: Params): string {\r\n    return new HttpParams({ fromObject: params }).toString();\r\n  }\r\n\r\n  /**\r\n   * Get translation key prefix from config\r\n   */\r\n  public getPrefix(): string {\r\n    return this.prefix;\r\n  }\r\n\r\n  /**\r\n   * Get escape translation prefix from config\r\n   */\r\n  public getEscapePrefix(): string {\r\n    return this.escapePrefix;\r\n  }\r\n}\r\n\r\n/**\r\n * Manually set configuration\r\n */\r\nexport class ManualParserLoader extends LocalizeParser {\r\n\r\n  /**\r\n   * CTOR\r\n   */\r\n  constructor(translate: TranslateService, location: Location, settings: LocalizeRouterSettings,\r\n    locales: string[] = ['en'], prefix: string = 'ROUTES.', escapePrefix: string = '') {\r\n    super(translate, location, settings);\r\n    this.locales = locales;\r\n    this.prefix = prefix || '';\r\n    this.escapePrefix = escapePrefix || '';\r\n  }\r\n\r\n  /**\r\n   * Initialize or append routes\r\n   */\r\n  load(routes: Routes): Promise<any> {\r\n    return new Promise((resolve: any) => {\r\n      this.init(routes).then(resolve);\r\n    });\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class DummyLocalizeParser extends LocalizeParser {\r\n  load(routes: Routes): Promise<any> {\r\n    return new Promise((resolve: any) => {\r\n      this.init(routes).then(resolve);\r\n    });\r\n  }\r\n}\r\n","/**\r\n * Compare if two objects are same\r\n */\r\nexport function equals(o1: any, o2: any): boolean {\r\n  if (o1 === o2) {\r\n    return true;\r\n  }\r\n  if (o1 === null || o2 === null) {\r\n    return false;\r\n  }\r\n  if (o1 !== o1 && o2 !== o2) {\r\n    return true; // NaN === NaN\r\n  }\r\n  const t1 = typeof o1,\r\n    t2 = typeof o2;\r\n  let length: number,\r\n    key: any,\r\n    keySet: any;\r\n\r\n  if (t1 === t2 && t1 === 'object') {\r\n    if (Array.isArray(o1)) {\r\n      if (!Array.isArray(o2)) {\r\n        return false;\r\n      }\r\n      if ((length = o1.length) === o2.length) {\r\n        for (key = 0; key < length; key++) {\r\n          if (!equals(o1[key], o2[key])) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    } else {\r\n      if (Array.isArray(o2)) {\r\n        return false;\r\n      }\r\n      keySet = Object.create(null);\r\n      for (key in o1) {\r\n        if (o1.hasOwnProperty(key)) {\r\n          if (!equals(o1[key], o2[key])) {\r\n            return false;\r\n          }\r\n          keySet[key] = true;\r\n        }\r\n      }\r\n      for (key in o2) {\r\n        if (o2.hasOwnProperty(key)) {\r\n          if (!(key in keySet) && typeof o2[key] !== 'undefined') {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Determine if the argument is shaped like a Promise\r\n */\r\nexport function isPromise(obj: any): obj is Promise<any> {\r\n  // allow any Promise/A+ compliant thenable.\r\n  // It's up to the caller to ensure that obj.then conforms to the spec\r\n  return !!obj && typeof obj.then === 'function';\r\n}\r\n\r\n/**\r\n * Deep copy of object and array\r\n */\r\nexport function deepCopy<t>(object: t): t {\r\n  const output = Array.isArray(object) ? [] : {};\r\n  for (const data in object) {\r\n    if (data) {\r\n      const value = object[data];\r\n      output[data as string] = (typeof value === 'object') ? deepCopy(value) : value;\r\n    }\r\n  }\r\n  return output as t;\r\n}\r\n\r\nexport function flatten<T>(list: Array<T|T[]>): T[] {\r\n  return list.reduce((flat: any[], item: T|T[]): T[] => {\r\n    const flatItem = Array.isArray(item) ? flatten(item) : item;\r\n    return (<T[]>flat).concat(flatItem);\r\n  }, []);\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\n// import { Location } from '@angular/common';\r\nimport {\r\n  Router, NavigationStart, ActivatedRouteSnapshot, NavigationExtras, ActivatedRoute,\r\n  Event, NavigationCancel, Routes\r\n} from '@angular/router';\r\nimport { Subject, Observable, ReplaySubject } from 'rxjs';\r\nimport { filter, pairwise } from 'rxjs/operators';\r\n\r\nimport { LocalizeParser } from './localize-router.parser';\r\nimport { LocalizeRouterSettings } from './localize-router.config';\r\nimport { LocalizedMatcherUrlSegment } from './localized-matcher-url-segment';\r\nimport { deepCopy } from './util';\r\n\r\n/**\r\n * Localization service\r\n * modifyRoutes\r\n */\r\n@Injectable()\r\nexport class LocalizeRouterService {\r\n  routerEvents: Subject<string>;\r\n  hooks: {\r\n    /** @internal */\r\n    _initializedSubject: ReplaySubject<boolean>;\r\n    initialized: Observable<boolean>;\r\n  };\r\n\r\n\r\n  private latestUrl: string;\r\n  private lastExtras?: NavigationExtras;\r\n\r\n  /**\r\n   * CTOR\r\n   */\r\n  constructor(\r\n      @Inject(LocalizeParser) public parser: LocalizeParser,\r\n      @Inject(LocalizeRouterSettings) public settings: LocalizeRouterSettings,\r\n      @Inject(Router) private router: Router,\r\n      @Inject(ActivatedRoute) private route: ActivatedRoute/*,\r\n      @Inject(Location) private location: Location*/\r\n    ) {\r\n      this.routerEvents = new Subject<string>();\r\n      const initializedSubject = new ReplaySubject<boolean>(1);\r\n      this.hooks = {\r\n        _initializedSubject: initializedSubject,\r\n        initialized: initializedSubject.asObservable()\r\n      };\r\n  }\r\n\r\n  /**\r\n   * Start up the service\r\n   */\r\n  init(): void {\r\n    this.applyConfigToRouter(this.parser.routes);\r\n    // subscribe to router events\r\n    this.router.events\r\n      .pipe(\r\n        filter(event => event instanceof NavigationStart),\r\n        pairwise()\r\n      )\r\n      .subscribe(this._routeChanged());\r\n\r\n    if (this.settings.initialNavigation) {\r\n      this.router.initialNavigation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change language and navigate to translated route\r\n   */\r\n  changeLanguage(lang: string, extras?: NavigationExtras, useNavigateMethod?: boolean): void {\r\n\r\n    if (lang !== this.parser.currentLang) {\r\n      const rootSnapshot: ActivatedRouteSnapshot = this.router.routerState.snapshot.root;\r\n\r\n      this.parser.translateRoutes(lang).subscribe(() => {\r\n\r\n        let url = this.traverseRouteSnapshot(rootSnapshot);\r\n        url = this.translateRoute(url) as string;\r\n\r\n        if (!this.settings.alwaysSetPrefix) {\r\n          let urlSegments = url.split('/');\r\n          const languageSegmentIndex = urlSegments.indexOf(this.parser.currentLang);\r\n          // If the default language has no prefix make sure to remove and add it when necessary\r\n          if (this.parser.currentLang === this.parser.defaultLang) {\r\n            // Remove the language prefix from url when current language is the default language\r\n            if (languageSegmentIndex === 0 || (languageSegmentIndex === 1 && urlSegments[0] === '')) {\r\n              // Remove the current aka default language prefix from the url\r\n              urlSegments = urlSegments.slice(0, languageSegmentIndex).concat(urlSegments.slice(languageSegmentIndex + 1));\r\n            }\r\n          } else {\r\n            // When coming from a default language it's possible that the url doesn't contain the language, make sure it does.\r\n            if (languageSegmentIndex === -1) {\r\n              // If the url starts with a slash make sure to keep it.\r\n              const injectionIndex = urlSegments[0] === '' ? 1 : 0;\r\n              urlSegments = urlSegments.slice(0, injectionIndex).concat(this.parser.currentLang, urlSegments.slice(injectionIndex));\r\n            }\r\n          }\r\n          url = urlSegments.join('/');\r\n        }\r\n\r\n        // Prevent multiple \"/\" character\r\n        url = url.replace(/\\/+/g, '/');\r\n\r\n        const lastSlashIndex = url.lastIndexOf('/');\r\n        if (lastSlashIndex > 0 && lastSlashIndex === url.length - 1) {\r\n          url = url.slice(0, -1);\r\n        }\r\n\r\n        const queryParamsObj = this.parser.chooseQueryParams(extras, this.route.snapshot.queryParams);\r\n\r\n        this.applyConfigToRouter(this.parser.routes);\r\n\r\n        this.lastExtras = extras;\r\n        if (useNavigateMethod) {\r\n          const extrasToApply: NavigationExtras = extras ? {...extras} : {};\r\n          if (queryParamsObj) {\r\n            extrasToApply.queryParams = queryParamsObj;\r\n          }\r\n          this.router.navigate([url], extrasToApply);\r\n        } else {\r\n          let queryParams = this.parser.formatQueryParams(queryParamsObj);\r\n          queryParams = queryParams ? `?${queryParams}` : '';\r\n          this.router.navigateByUrl(`${url}${queryParams}`, extras);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Traverses through the tree to assemble new translated url\r\n   */\r\n  private traverseRouteSnapshot(snapshot: ActivatedRouteSnapshot): string {\r\n    if (snapshot.firstChild && snapshot.routeConfig) {\r\n      return `${this.parseSegmentValue(snapshot)}/${this.traverseRouteSnapshot(snapshot.firstChild)}`;\r\n    } else if (snapshot.firstChild) {\r\n      return this.traverseRouteSnapshot(snapshot.firstChild);\r\n    } else {\r\n      return this.parseSegmentValue(snapshot);\r\n    }\r\n    /* if (snapshot.firstChild && snapshot.firstChild.routeConfig && snapshot.firstChild.routeConfig.path) {\r\n      if (snapshot.firstChild.routeConfig.path !== '**') {\r\n        return this.parseSegmentValue(snapshot) + '/' + this.traverseRouteSnapshot(snapshot.firstChild);\r\n      } else {\r\n        return this.parseSegmentValue(snapshot.firstChild);\r\n      }\r\n    }\r\n    return this.parseSegmentValue(snapshot); */\r\n  }\r\n\r\n  /**\r\n   * Build URL from segments and snapshot (for params)\r\n   */\r\n  private buildUrlFromSegments(snapshot: ActivatedRouteSnapshot, segments: string[]): string {\r\n    return segments.map((s: string, i: number) => s.indexOf(':') === 0 ? snapshot.url[i].path : s).join('/');\r\n  }\r\n\r\n  /**\r\n   * Extracts new segment value based on routeConfig and url\r\n   */\r\n  private parseSegmentValue(snapshot: ActivatedRouteSnapshot): string {\r\n    if (snapshot.routeConfig && snapshot.routeConfig.matcher) {\r\n      const subPathMatchedSegments = this.parseSegmentValueMatcher(snapshot);\r\n      return this.buildUrlFromSegments(snapshot, subPathMatchedSegments);\r\n    } else if (snapshot.data.localizeRouter) {\r\n      const path = snapshot.data.localizeRouter.path;\r\n      const subPathSegments = path.split('/');\r\n      return this.buildUrlFromSegments(snapshot, subPathSegments);\r\n    } else if (snapshot.parent && snapshot.parent.parent) { // Not lang route and no localizeRouter data = excluded path\r\n      const path = snapshot.routeConfig.path;\r\n      const subPathSegments = path.split('/');\r\n      return this.buildUrlFromSegments(snapshot, subPathSegments);\r\n    } else {\r\n      return '';\r\n    }\r\n    /* if (snapshot.routeConfig) {\r\n      if (snapshot.routeConfig.path === '**') {\r\n        return snapshot.url.filter((segment: UrlSegment) => segment.path).map((segment: UrlSegment) => segment.path).join('/');\r\n      } else {\r\n        const subPathSegments = snapshot.routeConfig.path.split('/');\r\n        return subPathSegments.map((s: string, i: number) => s.indexOf(':') === 0 ? snapshot.url[i].path : s).join('/');\r\n      }\r\n    }\r\n    return ''; */\r\n  }\r\n\r\n  private parseSegmentValueMatcher(snapshot: ActivatedRouteSnapshot): string[] {\r\n    const localizeMatcherParams = snapshot.data && snapshot.data.localizeMatcher && snapshot.data.localizeMatcher.params || { };\r\n    const subPathSegments: string[] = snapshot.url\r\n      .map((segment: LocalizedMatcherUrlSegment) => {\r\n        const currentPath = segment.path;\r\n        const matchedParamName = segment.localizedParamName;\r\n        const val = (matchedParamName && localizeMatcherParams[matchedParamName]) ?\r\n          localizeMatcherParams[matchedParamName](currentPath) : null;\r\n        return val || `${this.parser.getEscapePrefix()}${currentPath}`;\r\n      });\r\n    return subPathSegments;\r\n  }\r\n\r\n  /**\r\n   * Translate route to current language\r\n   * If new language is explicitly provided then replace language part in url with new language\r\n   */\r\n  translateRoute(path: string | any[]): string | any[] {\r\n    if (typeof path === 'string') {\r\n      const url = this.parser.translateRoute(path);\r\n      return !path.indexOf('/') ? this.parser.addPrefixToUrl(url) : url;\r\n    }\r\n    // it's an array\r\n    const result: any[] = [];\r\n    (path as Array<any>).forEach((segment: any, index: number) => {\r\n      if (typeof segment === 'string') {\r\n        const res = this.parser.translateRoute(segment);\r\n        if (!index && !segment.indexOf('/')) {\r\n          result.push(this.parser.addPrefixToUrl(res));\r\n        } else {\r\n          result.push(res);\r\n        }\r\n      } else {\r\n        result.push(segment);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Event handler to react on route change\r\n   */\r\n  private _routeChanged(): (eventPair: [NavigationStart, NavigationStart]) => void {\r\n    return ([previousEvent, currentEvent]: [NavigationStart, NavigationStart]) => {\r\n      const previousLang = this.parser.getLocationLang(previousEvent.url) || this.parser.defaultLang;\r\n      const currentLang = this.parser.getLocationLang(currentEvent.url) || this.parser.defaultLang;\r\n      const lastExtras = this.lastExtras;\r\n\r\n      if (currentLang !== previousLang && this.latestUrl !== currentEvent.url) {\r\n        this.latestUrl = currentEvent.url;\r\n        this.cancelCurrentNavigation();\r\n        this.parser.translateRoutes(currentLang)\r\n          .subscribe(() => {\r\n            // Reset routes again once they are all translated\r\n            this.applyConfigToRouter(this.parser.routes);\r\n            // Clear global extras\r\n            this.lastExtras = undefined;\r\n            // Init new navigation with same url to take new config in consideration\r\n            this.router.navigateByUrl(currentEvent.url, lastExtras);\r\n            // Fire route change event\r\n            this.routerEvents.next(currentLang);\r\n          });\r\n      }\r\n      this.latestUrl = currentEvent.url;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Drop the current Navigation\r\n   */\r\n  private cancelCurrentNavigation() {\r\n    const currentNavigation = this.router.getCurrentNavigation();\r\n    const url = this.router.serializeUrl(currentNavigation.extractedUrl);\r\n    (this.router.events as Subject<Event>).next(new NavigationCancel(currentNavigation.id, url, ''));\r\n    (this.router as any).transitions.next({...(this.router as any).transitions.getValue(), id: 0});\r\n  }\r\n\r\n  /**\r\n   * Apply config to Angular RouterModule\r\n   * @param config routes to apply\r\n   */\r\n  private applyConfigToRouter(config: Routes) {\r\n    this.router.resetConfig(deepCopy(config));\r\n  }\r\n\r\n}\r\n","import { PipeTransform, Pipe, ChangeDetectorRef, OnDestroy } from '@angular/core';\r\nimport { LocalizeRouterService } from './localize-router.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { equals } from './util';\r\n\r\nconst VIEW_DESTROYED_STATE = 128;\r\n\r\n@Pipe({\r\n  name: 'localize',\r\n  pure: false // required to update the value when the promise is resolved\r\n})\r\nexport class LocalizeRouterPipe implements PipeTransform, OnDestroy {\r\n  private value: string | any[] = '';\r\n  private lastKey: string | any[];\r\n  private lastLanguage: string;\r\n  private subscription: Subscription;\r\n\r\n  /**\r\n   * CTOR\r\n   */\r\n  constructor(private localize: LocalizeRouterService, private _ref: ChangeDetectorRef) {\r\n    this.subscription = this.localize.routerEvents.subscribe(() => {\r\n      this.transform(this.lastKey);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transform current url to localized one\r\n   */\r\n  transform(query: string | any[]): string | any[] {\r\n    if (!query || query.length === 0 || !this.localize.parser.currentLang) {\r\n      return query;\r\n    }\r\n    if (equals(query, this.lastKey) && equals(this.lastLanguage, this.localize.parser.currentLang)) {\r\n      return this.value;\r\n    }\r\n    this.lastKey = query;\r\n    this.lastLanguage = this.localize.parser.currentLang;\r\n\r\n    /** translate key and update values */\r\n    this.value = this.localize.translateRoute(query);\r\n    this.lastKey = query;\r\n    // if view is already destroyed, ignore firing change detection\r\n    const view = (this._ref as any)._view;\r\n    if (view && (view.state & VIEW_DESTROYED_STATE)) {\r\n      return this.value;\r\n    }\r\n    setTimeout(() => {\r\n      this._ref.detectChanges();\r\n    }, 0)\r\n\r\n    return this.value;\r\n  }\r\n}\r\n","import { RouteReuseStrategy, DetachedRouteHandle, ActivatedRouteSnapshot } from '@angular/router';\r\n\r\nexport class GilsdavReuseStrategy implements RouteReuseStrategy {\r\n  // private handlers: {[key: string]: DetachedRouteHandle} = {};\r\n  constructor() {\r\n  }\r\n  shouldDetach(route: ActivatedRouteSnapshot): boolean {\r\n    // console.log('shouldDetach', route);\r\n    return false;\r\n  }\r\n  store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle): void {\r\n    // console.log('store', route, handle);\r\n    // console.log('store url', this.getKey(route));\r\n    // this.handlers[this.getKey(route)] = handle;\r\n  }\r\n  shouldAttach(route: ActivatedRouteSnapshot): boolean {\r\n    // console.log('shouldAttach', route, this.getKey(route));\r\n    // return !!this.handlers[this.getKey(route)];\r\n    return false;\r\n  }\r\n  retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle {\r\n    // console.log('retrieve', route);\r\n    // console.log('retrieve url', this.getKey(route));\r\n    // const result = this.handlers[this.getKey(route)];\r\n    // delete this.handlers[this.getKey(route)];\r\n    // return result;\r\n    return null;\r\n  }\r\n  shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\r\n    // console.log('shouldReuseRoute', future, curr, this.getKey(future) === this.getKey(curr));\r\n    // console.log('shouldReuseRoute', future && curr ? this.getKey(future) === this.getKey(curr) : false);\r\n    return future && curr ? this.getKey(future) === this.getKey(curr) : false;\r\n  }\r\n  private getKey(route: ActivatedRouteSnapshot) {\r\n    // console.log(route.parent.component.toString());\r\n    if (route.firstChild && route.firstChild.routeConfig && route.firstChild.routeConfig.path &&\r\n        route.firstChild.routeConfig.path.indexOf('**') !== -1) { // WildCard\r\n      return 'WILDCARD';\r\n    } else if (!route.data.localizeRouter && (!route.parent || !route.parent.parent) && !route.data.skipRouteLocalization) { // Lang route\r\n      return 'LANG';\r\n    } else if (route.routeConfig.matcher) {\r\n      let keyM = `${this.getKey(route.parent)}/${route.routeConfig.matcher.name}`;\r\n      if (route.data.discriminantPathKey) {\r\n        keyM = `${keyM}-${route.data.discriminantPathKey}`;\r\n      }\r\n      return keyM;\r\n    } else if (route.data.localizeRouter) {\r\n      let key = `${this.getKey(route.parent)}/${route.data.localizeRouter.path}`;\r\n      if (route.data.discriminantPathKey) {\r\n        key = `${key}-${route.data.discriminantPathKey}`;\r\n      }\r\n      return key;\r\n    } else {\r\n      let key = route.routeConfig.path;\r\n      if (route.parent) {\r\n        key = `${this.getKey(route.parent)}/${route.routeConfig.path}`;\r\n      }\r\n      if (route.data.discriminantPathKey) {\r\n        key = `${key}-${route.data.discriminantPathKey}`;\r\n      }\r\n      return key;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Router, UrlSerializer, ChildrenOutletContexts, Routes, Route, ExtraOptions, UrlHandlingStrategy,\r\n  RouteReuseStrategy, RouterEvent, LoadChildren, ROUTES, DefaultTitleStrategy, TitleStrategy\r\n} from '@angular/router';\r\nimport { Type, Injector, Compiler, ApplicationRef, NgModuleFactory, PLATFORM_ID } from '@angular/core';\r\nimport { Location, isPlatformBrowser } from '@angular/common';\r\nimport { from, of, isObservable, Observable } from 'rxjs';\r\nimport { mergeMap, map } from 'rxjs/operators';\r\nimport { flatten, isPromise } from './util';\r\nimport { LocalizeParser } from './localize-router.parser';\r\n\r\nexport class LocalizedRouter extends Router {\r\n  constructor(\r\n    _rootComponentType: Type<any> | null,\r\n    _urlSerializer: UrlSerializer,\r\n    _rootContexts: ChildrenOutletContexts,\r\n    _location: Location, injector: Injector,\r\n    compiler: Compiler,\r\n    public config: Routes,\r\n    localize: LocalizeParser\r\n  ) {\r\n    super(_rootComponentType, _urlSerializer, _rootContexts, _location, injector, compiler, config);\r\n    // Custom configuration\r\n    const platformId = injector.get(PLATFORM_ID);\r\n    const isBrowser = isPlatformBrowser(platformId);\r\n    // __proto__ is needed for preloaded modules be doesn't work with SSR\r\n    // @ts-ignore\r\n    const configLoader = (isBrowser ? this.configLoader.__proto__ : this.configLoader);\r\n\r\n    configLoader.loadModuleFactoryOrRoutes = (loadChildren: LoadChildren) => {\r\n      return wrapIntoObservable(loadChildren()).pipe(mergeMap((t: any) => {\r\n        let compiled: Observable<NgModuleFactory<any> | Array<any>>;\r\n        if (t instanceof NgModuleFactory || Array.isArray(t)) {\r\n          compiled = of(t);\r\n        } else {\r\n          compiled = from(compiler.compileModuleAsync(t)) as Observable<NgModuleFactory<any>>;\r\n        }\r\n        return compiled.pipe(map(factory => {\r\n          if (Array.isArray(factory)) {\r\n            return factory;\r\n          }\r\n          return {\r\n            moduleType: factory.moduleType,\r\n            create: (parentInjector: Injector) => {\r\n              const module = factory.create(parentInjector);\r\n              const getMethod = module.injector.get.bind(module.injector);\r\n\r\n              module.injector['get'] = (token: any, notFoundValue: any) => {\r\n                const getResult = getMethod(token, notFoundValue);\r\n\r\n                if (token === ROUTES) {\r\n                  // translate lazy routes\r\n                  return localize.initChildRoutes([].concat(...getResult));\r\n                } else {\r\n                  return getResult;\r\n                }\r\n              };\r\n              return module;\r\n            }\r\n          };\r\n        }));\r\n      }));\r\n    };\r\n    // (this as any).navigations = (this as any).setupNavigations((this as any).transitions);\r\n  }\r\n\r\n}\r\nexport function setupRouter(\r\n  ref: ApplicationRef, urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts,\r\n  location: Location, injector: Injector, compiler: Compiler,\r\n  config: Route[][], localize: LocalizeParser, opts: ExtraOptions = {},\r\n  defaultTitleStrategy: DefaultTitleStrategy, titleStrategy?: TitleStrategy,\r\n  urlHandlingStrategy?: UrlHandlingStrategy, routeReuseStrategy?: RouteReuseStrategy) {\r\n  const router = new LocalizedRouter(\r\n    null, urlSerializer, contexts, location, injector, compiler, flatten(config), localize);\r\n\r\n  if (urlHandlingStrategy) {\r\n    router.urlHandlingStrategy = urlHandlingStrategy;\r\n  }\r\n\r\n  if (routeReuseStrategy) {\r\n    router.routeReuseStrategy = routeReuseStrategy;\r\n  }\r\n\r\n  router.titleStrategy = titleStrategy ?? defaultTitleStrategy;\r\n\r\n  if (opts.errorHandler) {\r\n    router.errorHandler = opts.errorHandler;\r\n  }\r\n\r\n  if (opts.malformedUriErrorHandler) {\r\n    router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\r\n  }\r\n\r\n  if (opts.enableTracing) {\r\n    router.events.subscribe((e: RouterEvent) => {\r\n      console.group(`Router Event: ${(<any>e.constructor).name}`);\r\n      console.log(e.toString());\r\n      console.log(e);\r\n      console.groupEnd();\r\n    });\r\n  }\r\n\r\n  if (opts.onSameUrlNavigation) {\r\n    router.onSameUrlNavigation = opts.onSameUrlNavigation;\r\n  }\r\n\r\n  if (opts.paramsInheritanceStrategy) {\r\n    router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\r\n  }\r\n\r\n  if (opts.urlUpdateStrategy) {\r\n    router.urlUpdateStrategy = opts.urlUpdateStrategy;\r\n  }\r\n\r\n  if (opts.relativeLinkResolution) {\r\n    router.relativeLinkResolution = opts.relativeLinkResolution;\r\n  }\r\n\r\n  return router;\r\n}\r\n\r\nexport function wrapIntoObservable<T>(value: T | NgModuleFactory<T> | Promise<T> | Observable<T>) {\r\n  if (isObservable(value)) {\r\n    return value;\r\n  }\r\n\r\n  if (isPromise(value)) {\r\n    // Use `Promise.resolve()` to wrap promise-like instances.\r\n    // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\r\n    // change detection.\r\n    return from(Promise.resolve(value));\r\n  }\r\n\r\n  return of(value);\r\n}\r\n","import {\r\n  NgModule, ModuleWithProviders, APP_INITIALIZER, Optional, SkipSelf,\r\n  Injectable, Injector, ApplicationRef, Compiler\r\n} from '@angular/core';\r\nimport { LocalizeRouterService } from './localize-router.service';\r\nimport { DummyLocalizeParser, LocalizeParser } from './localize-router.parser';\r\nimport {\r\n  RouterModule, Routes, RouteReuseStrategy, Router, UrlSerializer, ChildrenOutletContexts,\r\n  ROUTES, ROUTER_CONFIGURATION, UrlHandlingStrategy, DefaultTitleStrategy, TitleStrategy\r\n} from '@angular/router';\r\nimport { LocalizeRouterPipe } from './localize-router.pipe';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { CommonModule, Location } from '@angular/common';\r\nimport {\r\n  ALWAYS_SET_PREFIX,\r\n  CACHE_MECHANISM, CACHE_NAME, DEFAULT_LANG_FUNCTION, LOCALIZE_ROUTER_FORROOT_GUARD,\r\n  LocalizeRouterConfig, LocalizeRouterSettings,\r\n  RAW_ROUTES,\r\n  USE_CACHED_LANG,\r\n  COOKIE_FORMAT,\r\n  INITIAL_NAVIGATION\r\n} from './localize-router.config';\r\nimport { GilsdavReuseStrategy } from './gilsdav-reuse-strategy';\r\nimport { setupRouter } from './localized-router';\r\nimport { deepCopy } from './util';\r\n\r\n@Injectable()\r\nexport class ParserInitializer {\r\n  parser: LocalizeParser;\r\n  routes: Routes;\r\n\r\n  /**\r\n   * CTOR\r\n   */\r\n  constructor(private injector: Injector) {\r\n  }\r\n\r\n  appInitializer(): Promise<any> {\r\n    const res = this.parser.load(this.routes);\r\n\r\n    return res.then(() => {\r\n      const localize = this.injector.get(LocalizeRouterService);\r\n      const router = this.injector.get(Router);\r\n      const settings = this.injector.get(LocalizeRouterSettings);\r\n      localize.init();\r\n\r\n      if (settings.initialNavigation) {\r\n        return new Promise<void>(resolve => {\r\n          // @ts-ignore\r\n          const oldAfterPreactivation = router.afterPreactivation;\r\n          let firstInit = true;\r\n          // @ts-ignore\r\n          router.afterPreactivation = () => {\r\n            if (firstInit) {\r\n              resolve();\r\n              firstInit = false;\r\n              localize.hooks._initializedSubject.next(true);\r\n              localize.hooks._initializedSubject.complete();\r\n            }\r\n            return oldAfterPreactivation();\r\n          };\r\n        });\r\n      } else {\r\n        localize.hooks._initializedSubject.next(true);\r\n        localize.hooks._initializedSubject.complete();\r\n      }\r\n    });\r\n  }\r\n\r\n  generateInitializer(parser: LocalizeParser, routes: Routes[]): () => Promise<any> {\r\n    this.parser = parser;\r\n    this.routes = routes.reduce((a, b) => a.concat(b));\r\n    return this.appInitializer;\r\n  }\r\n}\r\n\r\nexport function getAppInitializer(p: ParserInitializer, parser: LocalizeParser, routes: Routes[]): any {\r\n  // DeepCopy needed to prevent RAW_ROUTES mutation\r\n  const routesCopy = deepCopy(routes);\r\n  return p.generateInitializer(parser, routesCopy).bind(p);\r\n}\r\n\r\n@NgModule({\r\n  imports: [CommonModule, RouterModule, TranslateModule],\r\n  declarations: [LocalizeRouterPipe],\r\n  exports: [LocalizeRouterPipe]\r\n})\r\nexport class LocalizeRouterModule {\r\n\r\n  static forRoot(routes: Routes, config: LocalizeRouterConfig = {}): ModuleWithProviders<LocalizeRouterModule> {\r\n    return {\r\n      ngModule: LocalizeRouterModule,\r\n      providers: [\r\n        {\r\n          provide: Router,\r\n          useFactory: setupRouter,\r\n          deps: [\r\n            ApplicationRef,\r\n            UrlSerializer,\r\n            ChildrenOutletContexts,\r\n            Location,\r\n            Injector,\r\n            Compiler,\r\n            ROUTES,\r\n            LocalizeParser,\r\n            ROUTER_CONFIGURATION,\r\n            DefaultTitleStrategy,\r\n            [TitleStrategy, new Optional()],\r\n            [UrlHandlingStrategy, new Optional()],\r\n            [RouteReuseStrategy, new Optional()]\r\n          ]\r\n        },\r\n        {\r\n          provide: LOCALIZE_ROUTER_FORROOT_GUARD,\r\n          useFactory: provideForRootGuard,\r\n          deps: [[LocalizeRouterModule, new Optional(), new SkipSelf()]]\r\n        },\r\n        { provide: USE_CACHED_LANG, useValue: config.useCachedLang },\r\n        { provide: ALWAYS_SET_PREFIX, useValue: config.alwaysSetPrefix },\r\n        { provide: CACHE_NAME, useValue: config.cacheName },\r\n        { provide: CACHE_MECHANISM, useValue: config.cacheMechanism },\r\n        { provide: DEFAULT_LANG_FUNCTION, useValue: config.defaultLangFunction },\r\n        { provide: COOKIE_FORMAT, useValue: config.cookieFormat },\r\n        { provide: INITIAL_NAVIGATION, useValue: config.initialNavigation },\r\n        LocalizeRouterSettings,\r\n        config.parser || { provide: LocalizeParser, useClass: DummyLocalizeParser },\r\n        {\r\n          provide: RAW_ROUTES,\r\n          multi: true,\r\n          useValue: routes\r\n        },\r\n        LocalizeRouterService,\r\n        ParserInitializer,\r\n        {\r\n          provide: APP_INITIALIZER,\r\n          multi: true,\r\n          useFactory: getAppInitializer,\r\n          deps: [ParserInitializer, LocalizeParser, RAW_ROUTES]\r\n        },\r\n        {\r\n          provide: RouteReuseStrategy,\r\n          useClass: GilsdavReuseStrategy\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  static forChild(routes: Routes): ModuleWithProviders<LocalizeRouterModule> {\r\n    return {\r\n      ngModule: LocalizeRouterModule,\r\n      providers: [\r\n        {\r\n          provide: RAW_ROUTES,\r\n          multi: true,\r\n          useValue: routes\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\nexport function provideForRootGuard(localizeRouterModule: LocalizeRouterModule): string {\r\n  if (localizeRouterModule) {\r\n    throw new Error(\r\n      `LocalizeRouterModule.forRoot() called twice. Lazy loaded modules should use LocalizeRouterModule.forChild() instead.`);\r\n  }\r\n  return 'guarded';\r\n}\r\n","import { ROUTES } from '@angular/router';\r\nimport {\r\n  NgModuleFactory, Injector, Compiler, Type, NgModuleRef\r\n} from '@angular/core';\r\nimport { LocalizeParser } from './localize-router.parser';\r\n\r\nexport class LocalizeNgModuleFactory extends NgModuleFactory<any> {\r\n  constructor(public moduleType: Type<any>) {\r\n    super();\r\n  }\r\n  create = (parentInjector: Injector) => {\r\n    const compiler = parentInjector.get(Compiler);\r\n    const localize = parentInjector.get(LocalizeParser);\r\n    const compiled = compiler.compileModuleAndAllComponentsSync(this.moduleType);\r\n    const moduleRef: NgModuleRef<any> = compiled.ngModuleFactory.create(parentInjector);\r\n    const getMethod = moduleRef.injector.get.bind(moduleRef.injector);\r\n    moduleRef.injector['get'] = (token: any, notFoundValue: any) => {\r\n      const getResult = getMethod(token, notFoundValue);\r\n\r\n      if (token === ROUTES) {\r\n        // translate lazy routes\r\n        return localize.initChildRoutes([].concat(...getResult));\r\n      } else {\r\n        return getResult;\r\n      }\r\n    };\r\n\r\n    return moduleRef;\r\n  }\r\n}\r\n\r\nexport function translateModule(moduleType: Type<any>) {\r\n  return new LocalizeNgModuleFactory(moduleType);\r\n}\r\n","\r\n/*\r\n * Public API Surface of ngx-translate-router\r\n */\r\n\r\nexport * from './lib/localize-router.module';\r\nexport * from './lib/localize-router.parser';\r\nexport * from './lib/localize-router.service';\r\nexport * from './lib/localize-router.pipe';\r\nexport * from './lib/localize-router.config';\r\nexport * from './lib/localize-router-config-loader';\r\nexport * from './lib/gilsdav-reuse-strategy';\r\nexport * from './lib/localized-router';\r\nexport * from './lib/localized-matcher-url-segment';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.LocalizeRouterService"],"mappings":"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"}